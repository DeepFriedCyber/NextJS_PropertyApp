// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
  ClientConstructor,
  Repository
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "email", type: "email" },
      { name: "password", type: "string" },
      { name: "userType", type: "string" },
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "companyName", type: "string" },
      { name: "licenseNumber", type: "string" },
      { name: "agencyName", type: "string" },
      { name: "verificationStatus", type: "string" },
      { name: "createdAt", type: "datetime" },
      { name: "updatedAt", type: "datetime" }
    ],
  },
  {
    name: "properties",
    checkConstraints: {
      properties_xata_id_length_xata_id: {
        name: "properties_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      properties_xata_vector_length_embedding: {
        name: "properties_xata_vector_length_embedding",
        columns: ["embedding"],
        definition: "CHECK ((array_length(embedding, 1) = 768))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_properties_xata_id_key: {
        name: "_pgroll_new_properties_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "bathrooms",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "bedrooms",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "embedding",
        type: "vector",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.search.dimension":768}',
      },
      {
        name: "epcRating",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "features",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "geolocation",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "imageUrl",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "listingAgent",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "location",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "price",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "propertyType",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "squareFeet",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "status",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "tenure",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "title",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Properties = InferredTypes["properties"];
export interface PropertiesRecord extends XataRecord {
  id: string;
  title: string;
  description: string;
  price: number;
  location: string;
  postcode: string;
  bedrooms: number;
  bathrooms: number;
  property_type: string;
  status: string;
  image_url: string;
  land_registry_id: string;
  sale_date: string;
  tenure_type: string;
  property_age: string;
  street_name: string;
  town_city: string;
  district: string;
  county: string;
  latitude?: number;
  longitude?: number;
  square_feet?: number;
  listing_agent?: string;
  created_at?: string;
  is_featured?: boolean;
}

export type DatabaseSchema = {
  users: Repository<UsersRecord>;
  properties: Repository<PropertiesRecord>;
};

const clientConstructor = buildClient();

const defaultOptions = {
  databaseURL: "https://Andrew-Smith-s-workspace-mek4mj.eu-west-1.xata.sh/db/property-db",
};

export class XataClient {
  private readonly client: any;
  public readonly db: DatabaseSchema;

  constructor(options?: BaseClientOptions) {
    const client = new clientConstructor({ ...defaultOptions, ...options }, tables);
    this.client = client;
    this.db = client.db as DatabaseSchema;
  }

  public table<T extends keyof DatabaseSchema>(name: T): DatabaseSchema[T] {
    return this.client.db[name] as DatabaseSchema[T];
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = (): XataClient => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};












